/*:
 ‚¨áÔ∏è *Vous pouvez ignorez le code ci-dessous, il nous permet juste d'initialiser et de visualiser le canvas √† droite.*
 */
import PlaygroundSupport
let canvas = Canvas()
PlaygroundPage.current.needsIndefiniteExecution = true
PlaygroundPage.current.liveView = canvas

/*:
 - - -
 # D√©couverte du canevas
 Le canevas, c'est l'√©tendue de pelouse verte qui se trouve sur la droite üåø.
 Sur ce canevas, nous allons pouvoir dessiner notre route. Et nous allons faire cela en utilisant les fonctions propos√©es par le canevas :
 ## Route
 `canvas.createRoadSection()`
 - üõ£ Cette fonction permet de **cr√©er une section de route**. A chaque appel de cette fonction, une nouvelle section de route est cr√©e.
 `canvas.createHomeRoadSection()`
 - üõ£üè† Similaire √† la pr√©c√©dente, cette fonction permet de cr√©er une section de route **qui contient une maison**.
 `canvas.createSchoolRoadSection()`
 - üõ£üè´ Similaire √† la pr√©c√©dente, cette fonction permet de cr√©er une section de route **qui contient une √©cole**.
 ## Bus
 `canvas.moveBusForward()`
 - üöå‚û°Ô∏è Cette fonction permet de faire avancer le bus jusqu'√† la section de route suivante. Attention, le bus ne peut pas avancer s'il n'y a plus de route devant lui.
 `canvas.stopBus()`
 - üöåüõë Cette fonction permet de faire marquer un arr√™t au bus.
 ## A vous de jouer !
 */
class Bus {                             // class Bus = type Bus
    var driverName: String              // propri√©t√© variable : driverName
    var seats = 20                      // propri√©t√© variable : seats
    var occupiedSeats = 0               // propri√©t√© variable : occupiedSeats
    
    let numberOfWheel = 4               // propri√©t√© constante : Le nombre de roue est constant et vaut 4
    
    init(driverName: String) {
        self.driverName = driverName    // self.driverName appel la propri√©t√© et non le param√®tre; driverName appel le param√®tre et non la propri√©t√©
    }
    
    func moveForward() {                // Cr√©√© une fonction moveForward qui fait avanc√© le bus d'une section
        canvas.moveBusForward()
    }
    func stopBus() {                    // Cr√©√© une fonction qui fait stopp√© le bus momentan√©ment a un point demand√©
        canvas.stopBus()
    }
    func drive(road: Road) {            // appelle la class de type "Road"
        for _ in road.sections {        // appelle le param√®tre road de propri√©t√© "sections" de class Road
            moveForward()               // Permet de faire avancer le bus d'autant de section de route cr√©√©e par la class Road
        }
    }
}

class SchoolBus: Bus {                  // la class ShoolBus h√©rite de la classe Bus, donc elle retrouve toutes ses propri√©t√©s et m√©thodes
    var schoolName = ""                 // On peut cr√©er des nouvelles propri√©t√©s ou m√©thodes a cette nouvelle classe
    
    override func drive(road: Road) {   // On utilise le methode "drive" de la class m√®re Bus dont on utilise le param√®tre road pour ramener la class Road
        for section in road.sections {  // Pour les sections dans la class Road qui cr√©√© les sections road.sections = "var sections = [RoadSection]()" l.65
            switch section.type {       // Ensuite on parcours section dont on lui ram√®ne la variable type l.100 pour pouvoir utiliser les √©num√©rations
            case .plain:                // On utilise l'√©num√©ration ".plain" pour notre section de route vide
                moveForward()           // Le bus avance lorsque nous sommes sur l'√©num√©ration donc "canvas.createRoadSection()" qui est une section vide
            case .home:                 // On utilise l'√©num√©ration ".home" pour notre section de route avec maison
                stopBus()               // Le bus s'arr√™te lorsqu'on est √† une section de route avec maison ".home" = canvas.createHomeRoadSection()
            case .school:               // On utilise l'√©num√©ration ".school" pour notre section de route avec √©cole
                stopBus()               // Le bus s'arr√™te lorsqu'on est sur une section de route avec √©cole ".school" = canvas.createSchoolRoadSection()
            }
        }
    }
    
    func pickChildren(from roadSection: RoadSection) {      // On cr√©√© la m√©thode pickChildren qui utilise l'√©tiquette from du param√®tre roadSection qui ram√®ne la class RoadSection
        if let section = roadSection as? HomeRoadSection {  // On controle la class RoadSection en cr√©ant la variable section qui change le param√®tre roadSection en HomeRoadSection
            occupiedSeats += section.children               // Ensuite on ajoute √† la propri√©t√© "occupiedSeats" le nombre d'enfant de la propri√©t√© children de HomeRoadSection via la nouvelle
        }                                                   // variable cr√©√©e en local "section", ce qui donne "section.children" => section = class HomeRoadSection donc on peut utiliser la
    }                                                       // propri√©t√© children de HomeRoadSection sur la propri√©t√© locale section. => section.children
    
    func shouldPickChildren() -> Bool {                     // On cr√©√© la m√©thode shouldPickChildren pour que occupiedSeats soit toujours inf√©rieur √† seats avec la fonction retour: Bool (vrai)
        return occupiedSeats < seats                        // Tant que occupiedSeats < seats la fonction = Bool donc elle s'√©xecute, si occupiedSeats > seats la fonction = False donc ne
    }                                                       // s'√©x√©cute pas.
    
    func dropChildren() {                                   // On cr√©e la m√©thode dropChildren pour que la param√®tre "occupiedSeats" de la class Bus soit de nouveau √† 0
        occupiedSeats = 0                                   // Donc on demande √† la propri√©t√© occupiedSeats de revenir √† 0 soit => occupiedSeats = 0
    }                                                       // Lorsque nous utiliserons cette m√©thode, occupiedSeats sera √©gale √† 0 soit la r√©initialisation de la propri√©t√© occupiedSeats
}

class Road {                            // class Road = type Road
    var sections = [RoadSection]()      // propri√©t√© variable : sections ; Cr√©√© un tableau de section de route qu'on peut parcourir
    static let maxLength = 77           // Propri√©t√© constante : maxLength vaut 77
    
    static func createStraightRoad() -> Road {  // Cr√©√© une m√©thode de class sans param√®tre qui retourne le type de la class Road
        return Road(length: 11)                 // Il retourne la class Road qui cr√©√© 11 sections de routes
    }
    
    static func createRoadToSchool() -> Road {  // On cr√©√© notre m√©thode de class qui retourne la class Road
        let road = Road(length: 30)             // On cr√©e une constante pour ramener notre class Road avec un param√®tre qui vaut 30 (30 sections de routes)
        for i in 0..<30 {                       // On parcours notre param√®tre de 30 sections de routes, donc pour i allant de 0 √† 29.
            if i % 7 == 1 {                     // Si on est sur la 7√®me section on cr√©e une section de route avec une maison
                road.sections.append(HomeRoadSection(children: 2))  // On ram√®ne notre class "HomeRoadSection()" auquel on remplie le param√®tre children: 2
            } else {                                                // Sinon, on cr√©e des sections de route vide
                road.sections.append(RoadSection(type: .plain))     // On ram√®ne notre class RoadSection  auquel on utilise le param√®tre RoadSectionType
            }                                                       // de la class RoadSectionType qui utilise l'√©num√©ration ".plain" pour cr√©er la route
        }                                                           // vide
        road.sections.append(SchoolRoadSection())                   // On ram√®ne notre class "SchoolRoadSection" pour cr√©er notre school √† la 30√®me section
        return road                                                 // Ensuite on retourne notre param√®tre road pour avoir nos 30 sections de route.
    }
    
    init(length: Int) {                 // Initialisation de la class Road avec param√®tre "length" de type Int; ensuite conditions
        var length = length             // On cr√©√© la variable length du param√®tre de l'init length
        if length > Road.maxLength {    // Si length > Road.maxLength (on appel la propri√©t√© maxLength de la class Road) /n
            length = Road.maxLength     // length sera √©gale a la propri√©t√© maxLength qui vaut 77. Elle ne d√©passera donc jamais 77 sections de routes.
        }
        for _ in 0..<length {           // On parcour le tableau pour aller de 0 jusqu'au param√®tre length de type Int lors que l'appel de la m√©thode ex: 20
            self.sections.append(RoadSection(type: .plain)) // On appel le propri√©t√© sections a laquelle on ajoute le tableau des sections sur lequel on
        }                                                   //   met l'√©num√©ration ".plain" pour cr√©er une section de route nue */
    }
}

enum RoadSectionType {
    case plain, home, school
}

class RoadSection {                     // class RoadSection = type RoadSection
    var type: RoadSectionType           // On cr√©√© une propri√©t√© de nom type qui ram√®ne notre √©num√©ration RoadSectionType
    
    init(type: RoadSectionType) {       // Ensuite on initialise avec un param√®tre qui ram√®ne le type RoadSectionType pour rapporter notre √©num√©ration
        self.type = type                // Ensuite j'utilise ma propri√©t√© type qui comporte RoadSectionType √† laquelle je lui ajoute le param√®tre type
        switch type {                   // Ensuite j'ajoute mon switch
        case.plain:                         // J'ajoute mon √©num ".plain" qui cr√©√© une route de section nue avec "canvas.createRoadSection()"
            canvas.createRoadSection()
        case.home:                          // J'ajoute mon √©num ".plain" qui cr√©√© une route de section avec maison avec "canvas.createHomeSection()"
            canvas.createHomeRoadSection()
        case.school:                         // J'ajoute mon √©num ".plain" qui cr√©√© une route de section avec √©cole avec "canvas.createSchoolSection()"
            canvas.createSchoolRoadSection()
        }
    }
}


class HomeRoadSection: RoadSection {        // On cr√©√© la class HomeRoadSection qui h√©rite de la class RoadSection
    var children: Int                       // On ajoute la propri√©t√© children de type Int
    
    init(children: Int) {                   // On ajoute le param√®tre children de type Int
        self.children = children            // On ajoute le param√®tre children de type Int √† la propri√©t√© children
        
        super.init(type: .home)             // On utilise le mot "super" qui permet de faire r√©cup√©r√© les propri√©t√©/m√©thode de la classe m√®re dans ce cas
    }                                       // on r√©cup√®re l'init de la class RoadSection donc "super.init(type: .home)"
}

class SchoolRoadSection: RoadSection {      // On cr√©√© la class HomeRoadSection qui h√©rite de la class RoadSection
    init() {                                // On initialise la class
        super.init(type: .school)           // On utilise le mot "super" qui permet de faire r√©cup√©r√© les propri√©t√©/m√©thode de la classe m√®re dans ce cas
    }                                       // on r√©cup√®re l'init de la class RoadSection donc "super.init(type: .school)"
}


var road = Road.createRoadToSchool()
var unBusScolaire = SchoolBus(driverName: "Jean")   // Ensuite on utilise toutes les propri√©t√©s et m√©thode de la class Bus & SchoolBus


