/*: 
‚¨áÔ∏è *Vous pouvez ignorez le code ci-dessous, il nous permet juste d'initialiser et de visualiser le canvas √† droite.*
 */
import PlaygroundSupport
let canvas = Canvas()
PlaygroundPage.current.needsIndefiniteExecution = true
PlaygroundPage.current.liveView = canvas

/*:
 - - -
 # D√©couverte du canevas
 Le canevas, c'est l'√©tendue de pelouse verte qui se trouve sur la droite üåø.
 Sur ce canevas, nous allons pouvoir dessiner notre route. Et nous allons faire cela en utilisant les fonctions propos√©es par le canevas :
 ## Route

 `canvas.createRoadSection()`
 - üõ£ Cette fonction permet de **cr√©er une section de route**. A chaque appel de cette fonction, une nouvelle section de route est cr√©e.

 `canvas.createHomeRoadSection()`
 - üõ£üè† Similaire √† la pr√©c√©dente, cette fonction permet de cr√©er une section de route **qui contient une maison**.

 `canvas.createSchoolRoadSection()`
 - üõ£üè´ Similaire √† la pr√©c√©dente, cette fonction permet de cr√©er une section de route **qui contient une √©cole**.

 ## Bus
 `canvas.moveBusForward()`

 - üöå‚û°Ô∏è Cette fonction permet de faire avancer le bus jusqu'√† la section de route suivante. Attention, le bus ne peut pas avancer s'il n'y a plus de route devant lui.

 `canvas.stopBus()`
 - üöåüõë Cette fonction permet de faire marquer un arr√™t au bus.

 ## A vous de jouer !
 */
class Bus {                             // class Bus = type Bus
    var driverName: String              // propri√©t√© variable : driverName
    var seats = 20                      // propri√©t√© variable : seats
    var occupiedSeats = 0               // propri√©t√© variable : occupiedSeats
    
    let numberOfWheel = 4               // propri√©t√© constante : Le nombre de roue est constant et vaut 4
    
    init(driverName: String) {
        self.driverName = driverName    // self.driverName appel la propri√©t√© et non le param√®tre; driverName appel le param√®tre et non la propri√©t√©
    }
    
    func moveForward() {                // Cr√©√© une fonction moveForward qui fait avanc√© le bus d'une section
        canvas.moveBusForward()
    }
    func stopBus() {                    // Cr√©√© une fonction qui fait stopp√© le bus momentan√©ment a un point demand√©
        canvas.stopBus()
    }
    func drive(road: Road) {            // appelle la class de type "Road"
        for _ in road.sections {        // appelle le param√®tre road de propri√©t√© "sections" de class Road
            moveForward()               // Permet de faire avancer le bus d'autant de section de route cr√©√©e par la class Road
        }
    }
}

enum RoadSectionType {                  // On cr√©√© notre √©num√©ration de type RoadSectionType
    case plain, home, school            // Notre √©num√©ration comporte 3 cas: plain, home & school
}


class Road {                            // class Road = type Road
    var sections = [RoadSection]()      // propri√©t√© variable : sections ; Cr√©√© un tableau de section de route qu'on peut parcourir
    static let maxLength = 77           // Propri√©t√© constante : maxLength vaut 77
    
    static func createStraightRoad() -> Road {  // Cr√©√© une m√©thode de class sans param√®tre qui retourne le type de la class Road
        return Road(length: 11)                 // Il retourne la class Road qui cr√©√© 11 sections de routes
    }
    
    init(length: Int) {                 // Initialisation de la class Road avec param√®tre "length" de type Int; ensuite conditions
        var length = length             // On cr√©√© la variable length du param√®tre de l'init length
        if length > Road.maxLength {    // Si length > Road.maxLength (on appel la propri√©t√© maxLength de la class Road) /n
            length = Road.maxLength     // length sera √©gale a la propri√©t√© maxLength qui vaut 77. Elle ne d√©passera donc jamais 77 sections de routes.
        }
        for _ in 0..<length {           // On parcour le tableau pour aller de 0 jusqu'au param√®tre length de type Int lors que l'appel de la m√©thode ex: 20
            self.sections.append(RoadSection(type: .plain)) // On appel le propri√©t√© sections a laquelle on ajoute le tableau des sections sur lequel on
        }                                                   //   met l'√©num√©ration ".plain" pour cr√©er une section de route nue */
    }
}

class RoadSection {                     // class RoadSection = type RoadSection
    var type: RoadSectionType           // On cr√©√© une propri√©t√© de nom type qui ram√®ne notre √©num√©ration RoadSectionType
    
    init(type: RoadSectionType) {       // Ensuite on initialise avec un param√®tre qui ram√®ne le type RoadSectionType pour rapporter notre √©num√©ration
        self.type = type                // Ensuite j'utilise ma propri√©t√© type qui comporte RoadSectionType √† laquelle je lui ajoute le param√®tre type
        switch type {                   // Ensuite j'ajoute mon switch
        case.plain:                         // J'ajoute mon √©num ".plain" qui cr√©√© une route de section nue avec "canvas.createRoadSection()"
            canvas.createRoadSection()
        case.home:                          // J'ajoute mon √©num ".plain" qui cr√©√© une route de section avec maison avec "canvas.createHomeSection()"
            canvas.createHomeRoadSection()
        case.school:                         // J'ajoute mon √©num ".plain" qui cr√©√© une route de section avec √©cole avec "canvas.createSchoolSection()"
            canvas.createSchoolRoadSection()
        }
    }
}

class HomeRoadSection: RoadSection {        // On cr√©√© la class HomeRoadSection qui h√©rite de la class RoadSection
    var children: Int                       // On ajoute la propri√©t√© children de type Int
    
    init(children: Int) {                   // On ajoute le param√®tre children de type Int
        self.children = children            // On ajoute le param√®tre children de type Int √† la propri√©t√© children
        
        super.init(type: .home)             // On utilise le mot "super" qui permet de faire r√©cup√©r√© les propri√©t√©/m√©thode de la classe m√®re dans ce cas
    }                                       // on r√©cup√®re l'init de la class RoadSection donc "super.init(type: .home)"
}

class SchoolRoadSection: RoadSection {      // On cr√©√© la class HomeRoadSection qui h√©rite de la class RoadSection
    init() {                                // On initialise la class
        super.init(type: .school)           // On utilise le mot "super" qui permet de faire r√©cup√©r√© les propri√©t√©/m√©thode de la classe m√®re dans ce cas
    }                                       // on r√©cup√®re l'init de la class RoadSection donc "super.init(type: .school)"
}



var route = Road(length: 20)             // On appel la class Road √† laquelle on remplie le param√®tre pour cr√©er le nombre de sections via la variable route
var unBus = Bus(driverName: "Jean")     // On appel la class Bus √† laquelle on ajoute remplie le param√®tre via la variable unBus
unBus.drive(road: route)                /* On utilise l'instance unBus √† laquelle on utilise la m√©thode drive qui prend le param√®tre "road" auquel on ajoute
                                        le type Road de param√®tre 20 via la variable route */

class SchoolBus: Bus {                  // la class ShoolBus h√©rite de la classe Bus, donc elle retrouve toutes ses propri√©t√©s et m√©thodes
    var schoolName = ""                 // On peut cr√©er des nouvelles propri√©t√©s ou m√©thodes a cette nouvelle classe
}
var unBusScolaire = SchoolBus(driverName: "Jean")   // Ensuite on utilise toutes les propri√©t√©s et m√©thode de la class Bus & SchoolBus
unBusScolaire.seats = 50
